#!/bin/bash

set -eu

# Full path of the current script
THIS=`readlink -f "${BASH_SOURCE[0]}" 2>/dev/null||echo $0`
# The directory where current script resides
DIR=`dirname "${THIS}"`

function usage(){
	cat "$DIR/README.md"
}

function cond(){

	export MAMBA_NO_BANNER=1
	export ENV_PREFIX="./.conda"

	parse(){
		grep -vE '^(\s*$|#)' "$1"
	}

	USAGE="conda update|freeze|check|replicate"
	if [ "$#" == "0" ]; then
		echo "$USAGE"
		exit 1
	fi
	
	mode="$1"; shift
	case "$mode" in
		update)
			$DIR/conda_sync.py sync "$@"
			;;
		freeze)
			$DIR/conda_sync.py freeze "$@"
			;;
		check)
			if [ ! "$(git status --porcelain spec-file.txt)" == "" ]; then
				echo "uncommited container definition"
				exit 1
			fi
			;;
		replicate)
			$DIR/conda_sync.py replicate "$@"
			;;
		*)
			echo "unrecognized mode $mode"
			echo "$USAGE"
			exit 1
			;;
	esac
}

function sing(){

	BINDS="/sys:/sys,/proc:/proc,/tmp:/tmp,/var/tmp:/var/tmp,/etc/resolv.conf:/etc/resolv.conf"
	if [ -d /tmpdir ]; then
		BINDS+=",/tmpdir:/tmpdir"
	fi
	if [ -L /dev/shm ]; then
		if [ ! -d /run/shm ]; then echo "/run/shm is not a directory"; exit 1; fi
		HAS_RUN=true
	fi
	if [[ "$HAS_RUN" == "true" ]]; then
		BINDS+=',/run/shm:/run/shm' #https://github.com/hpcng/singularity/issues/875#issuecomment-349146305
	fi


	ARGS_COMMON="--no-home --cleanenv --containall --pid --bind $BINDS"
	#no-home and contain-all plus the BINDS above avoid global config files stored in ~ to affect the container
	#pid fixes an issue with the psutils module
	sudo_with_user_env(){
		sudo bash -i -c "cd $(pwd); USER=$USER; HOME=$HOME; . ~/.bash_profile; $1"
	}

	sing_exec(){
		local CHG;
		if [[ "$HAS_RUN" == "true" ]] && [[ -d "$1" ]] ; then CHG=true; else CHG=false;fi
		if $CHG; then
			sudo mkdir -p $1/run/shm
		fi
		singularity exec $ARGS_COMMON --bind $(pwd):/pwd --pwd /pwd $@
		if $CHG; then
			sudo rm -d $1/run/shm
		fi
	}

	sing_bash(){
		sing_exec "$1" "bash -l -c \"${@:2}\""
	}

	DEF="./Singularity"

	make_def(){
		$DIR/make_def.sh > $DEF
	}

	calc_id(){
		if [ -f "$DEF" ] && [ "$(git status --porcelain $DEF)" == ""  ] ; then
			git rev-list -1 HEAD ./$DEF | xargs git rev-parse --short
		else
			echo "untracked"
		fi
	}

	if [ -f ./sing.config.sh ]; then
		. ./sing.config.sh
		ID=$(calc_id)
		SING_LIB="library://${SING_USER}/${SING_COLLECTION}/${SING_NAME}"
		TARGET="${SING_LIB}:$ID"
		IMG_NAME="${SING_NAME}_$ID"
	fi
	make_container(){
		
		USAGE="make_container local|remote [sign]"

		if [ "$#" == "0" ]; then
			echo "$USAGE"
			exit 1
		fi
		mode="$1";shift

		echo "making $TARGET"
		
		case "$mode" in
			local)
				TMP=$(mktemp -p $TMP_LOCAL -d $IMG_NAME.XXX )
				echo "building in $TMP"
				SDBOX="$TMP/${IMG_NAME}"
				IMG="$TMP/${IMG_NAME}.sif"
				sudo_with_user_env "singularity build --sandbox $SDBOX $DEF"
				sudo_with_user_env "singularity build $IMG $SDBOX"
				sudo rm -rdf $SDBOX
				if [[ "$#" -ge 1 && "$1" == "sign" ]]; then
					singularity sign --keyidx 0 --all $IMG
					singularity push "$IMG" "$TARGET"
				else
					singularity push -U "$IMG" "$TARGET"
				fi
				rm $IMG
				rm -d $TMP
				;;
			remote)
				singularity build --remote $TARGET $DEF
				if [[ "$#" -eq 2 && "$2" == "sign" ]]; then
					TMP=$(mktemp -p $TMP_LOCAL -d $IMG_NAME.XXX )
					IMG="$TMP/${IMG_NAME}.sif"
					singularity pull $IMG $TARGET
					singularity sign --keyidx 0 --all $IMG
					singularity push $IMG $TARGET
					rm $IMG
					rm -d ./tmp
				fi
				;;
			*)
				echo "unrecognized mode $mode"
				echo "$USAGE"
				exit 1
				;;
		esac
		
	}

	USAGE="sing install|config|freeze|make|exec|show|pull|check|maybe-make"
	if [ "$#" == "0" ]; then
		echo "$USAGE"
		exit 1
	fi
	mode="$1";shift
	case "$mode" in
		install)
			mamba install -y singularity
			;;
		config)
			if [ ! -f 'sing.config.sh' ]; then
				cat <<-EOF > sing.config.sh
				export SING_USER="sylabs_username"
				export SING_COLLECTION="sylabs_collection"
				export SING_NAME="repository_name"
				EOF
				cat <<-EOF > sing.test.sh
				python -c "print('python works')"
				EOF
				chmod +x sing.test.sh
				echo "Edit sing.config.sh, and sing.test.sh optionally."
			fi
			;;
		*)
			if [ ! -f 'sing.config.sh' ]; then
				echo 'config missing. run `conda-sing sing config` first'
				exit 1
			else
				case "$mode" in
					freeze)
						make_def
						;;
					make)
						make_container "$@"
						;;
					exec)
						sing_exec $TARGET "$@"
						;;
					show)
						echo $TARGET
						;;
					pull)
						singularity pull $TARGET
						;;
					check)
						if [ ! "$(git status --porcelain $DEF)" == "" ]; then
							echo "uncommited container definition"
							exit 1
						fi
						;;
					maybe-make)
						if ( export SINGULARITY_PULLFOLDER=/notexist; singularity pull $TARGET 2>&1 > /dev/null ) | grep -q "does not exist in the library" ; then
							make_container remote
						fi
						;;
					*)
						echo "unrecognized mode $mode"
						echo "$USAGE"
						exit 1
						;;
				esac
			fi
			;;
	esac
}

if [ "$#" == "0" ]; then
	usage
	exit 1
fi

if ! git rev-parse --git-dir > /dev/null 2>&1 ; then
	echo "not a git repository"
	exit 1
fi

mode="$1"; shift
case "$mode" in
	conda)
		cond "$@"
		;;
	sing)
		sing "$@"
		;;
	upgrade)
		cond update
		cond freeze
		sing freeze
		cond check
		sing check
		sing maybe-make
		;;
	*)
		echo "unrecognized mode $mode"
		usage
		exit 1
		;;
esac